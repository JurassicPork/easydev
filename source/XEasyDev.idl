#ifndef __org_universolibre_EasyDev_idl__
#define __org_universolibre_EasyDev_idl__

#include <com/sun/star/uno/XInterface.idl>


module org { module universolibre { module EasyDev {

    interface XDebug : com::sun::star::uno::XInterface
    {
        [attribute, readonly] string error;

        void debug([in] any data);
        void log([in] string pathLog, [in] any data);
        void msgbox([in] any data);
        void mri([in] any obj);
        boolean test([in] any data);
    };

    published struct Macro
    {
        string Library;
        string Module;
        string Name;
        string Language;
        string Location;
        boolean Thread;
    };

    interface XTools : com::sun::star::uno::XInterface
    {
        [attribute, readonly] string VERSION;
        [attribute, readonly] string OS;
        [attribute, readonly] string LANGUAGE;
        [attribute, readonly] string APP_NAME;
        [attribute, readonly] string APP_VERSION;
        [attribute] any value;

        string getSizeScreen();
        sequence< string > getInfoPC();
        boolean question([in] string title, [in] string message);

        string render([in] string template, [in] sequence< any > data);
        string format([in] string template, [in] any data);

        string getPath([in] string name);
        sequence< string > getPathInfo([in] string path);
        string pathJoin([in] sequence< string > paths);
        string getFolder([in] string initFolder);
        any getSelectedFiles([in] string initFolder, [in] boolean multiple, [in] sequence< sequence< string > > filters);
        sequence< string > getFiles([in] string path, [in] string ext);
        any fileOpen([in] string path, [in] string mode, [in] boolean array);
        any fileSave([in] string path, [in] string mode, [in] any data);

        any execute([in] sequence< string > args, [in] boolean wait);

        any getConfig([in] string key);
        boolean setConfig([in] string key, [in] any value);
        string getClipboard();
        void setClipboard([in] string text);

        long getEpoch();
        any callMacro([in] org::universolibre::EasyDev::Macro macro, [in] sequence< any > args);
        void timer([in] string name, [in] unsigned short wait, [in] org::universolibre::EasyDev::Macro macro, [in] sequence< any > args);
        void stopTimer([in] string name);
        void exportCSV([in] string path, [in] sequence< sequence< any > > data, [in] sequence< any > options);
    };

    interface XArrays : com::sun::star::uno::XInterface
    {
        any array([in] sequence< any > array, [in] string method, [in] any value);
        any append([in] any array, [in] any value);
        any delete([in] any array, [in] long pos);
        any slice([in] any array, [in] string value);
        any extend([in] any array1, [in] any array2);
        any multi([in] any array, [in] long value);
        any unique([in] any array);
        any reverse([in] any array);
        any sorted([in] any array, [in] short column);
        any insert([in] any array, [in] long pos, [in] any value);
        any pop([in] any array, [in] long pos);
        any remove([in] any array, [in] any value, [in] boolean all);
        long len([in] any array);
        long count([in] any array, [in] any value);
        any index([in] any array, [in] any value);
        double min([in] any array);
        double max([in] any array);
        double average([in] any array);
        double sum([in] any array);
        boolean exists([in] any array, [in] any value);
        boolean equal([in] any array1, [in] any array2);
        any intersection([in] any array1, [in] any array2);
        any union([in] any array1, [in] any array2);
        any symmetricDifference([in] any array1, [in] any array2);
        any difference([in] any array1, [in] any array2);
        any getColumn([in] any array, [in] short column);
    };

    published struct SmtpServer
    {
        string Name;
        unsigned short Port;
        boolean Ssl;
        string User;
        string Password;
        boolean Thread;
        string PathSave;
    };

    published struct EmailMessage
    {
        string To;
        string Cc;
        string Bcc;
        string Subject;
        string Body;
        sequence< string > Files;
        boolean Save;
    };

    interface XEMail : com::sun::star::uno::XInterface
    {
        boolean sendMail(
            [in] org::universolibre::EasyDev::SmtpServer server,
            [in] org::universolibre::EasyDev::EmailMessage message
        );
    };

    service Email {
        interface XEMail;
    };

    interface XLOApp : com::sun::star::uno::XInterface
    {
        any newDoc([in] string typeDoc);
        any newDB([in] string path);
        any getDoc([in] string title);
        string getTypeDoc([in] any doc);
        sequence< any > getDocs();
        any openDoc([in] string pathDoc, [in] sequence< any > data);
        void setFocus([in] any doc);
        any getStatusBar([in] any doc);
        string exportPDF([in] any doc, [in] string pathSave, [in] sequence< any > options);
    };

    published struct CellRangeAddress
    {
        any Doc;
        boolean Current;
        any Sheet;
        string Name;
        long Col;
        long Row;
        long EndCol;
        long EndRow;
    };

    interface XLOCalc : com::sun::star::uno::XInterface
    {
        any getCell([in] org::universolibre::EasyDev::CellRangeAddress address);
        any getRange([in] org::universolibre::EasyDev::CellRangeAddress address);
        void selectRange([in] any doc, [in] any rango);
        any getCurrentRegion([in] any cell, [in] boolean getCursor);
        long getLastRow([in] any cell);
        long getNextID([in] any cell, [in] long col);
        any getValue([in] any cell);
        void setValue([in] any cell, [in] any value);
    };

    interface XLOWriter : com::sun::star::uno::XInterface
    {
        any getParagraphs([in] any doc, [in] boolean empty);
    };

    interface XLODialog : com::sun::star::uno::XInterface
    {
        [attribute, readonly] byte decimals;
        [attribute] string numfmt;

        any createDialog([in] any path);
        any createControl([in] any dialog, [in] string typeControl, [in] sequence< any > options);
        any setGridData([in] any grid, [in] sequence< any > data, [in] sequence< string > colFormat);
        any getGridData([in] any grid, [in] sequence< unsigned short > exclude);
    };

    interface XLODataBase : com::sun::star::uno::XInterface
    {
        any conODBC([in] string name, [in] string user, [in] string password);
    };

    service EasyDev {
        interface XDebug;
        interface XTools;
        interface XArrays;
        interface XLOApp;
        interface XLOCalc;
        interface XLOWriter;
        interface XLODialog;
        interface XLODataBase;
    };

}; }; };
#endif
