#ifndef __org_universolibre_EasyDev_idl__
#define __org_universolibre_EasyDev_idl__

#include <com/sun/star/uno/XInterface.idl>

module org { module universolibre { module EasyDev {

    interface XDebug : com::sun::star::uno::XInterface
    {
        [attribute, readonly] string error;

        void debug([in] any data);
        void msgbox([in] any data);
        void mri([in] any obj);
        any test([in] any data);
    };

    interface XTools : com::sun::star::uno::XInterface
    {
        [attribute, readonly] string VERSION;
        [attribute, readonly] string OS;
        [attribute] string value;

        string getSizeScreen();
        sequence< string > getInfoPC();
        boolean question([in] string title, [in] string message);

        string render([in] string template, [in] sequence< sequence< any > > data);
        string format([in] string template, [in] any data);

        string getPath([in] string name);
        sequence< string > getPathInfo([in] string path);
        string pathJoin([in] sequence< string > paths);
        string getFolder([in] string initFolder);
        any getSelectedFiles([in] string initFolder, [in] boolean multiple, [in] sequence< string > filters);
        sequence< string > getFiles([in] string path, [in] string ext);
        any fileOpen([in] string path, [in] string mode);

        any execute([in] sequence< string > args, [in] boolean wait);

        any getConfig([in] string key);
        boolean setConfig([in] string key, [in] any value);
        string getClipboard();
        void setClipboard([in] string text);

        any array([in] sequence< any > array, [in] string method, [in] any data);

        long getEpoch();
    };

    interface XEasyDev : com::sun::star::uno::XInterface
    {
        string getTypeDoc([in] any doc);
        sequence< any > getDocs();
        any openDoc([in] string pathDoc, [in] sequence< any > data);
        void setFocus([in] any doc);
        any getStatusBar([in] any doc);
        string exportPDF([in] any doc, [in] string pathSave, [in] sequence< any > options);
        boolean exportCSV([in] string path, [in] sequence< sequence< any > > data, [in] sequence< sequence< any > > options);

        any getRange([in] any doc, [in] any sheetName, [in] any rangeAddress);
        void selectRange([in] any doc, [in] any sheetName, [in] any rango);
        any getCurrentRegion([in] any cell);
        long getLastRow([in] any cell);
    };

    interface XLOApp : com::sun::star::uno::XInterface
    {
        any newDoc([in] string typeDoc);
        any getDoc([in] string title);
    };

    interface XLOCalc : com::sun::star::uno::XInterface
    {
        any getCell([in] any doc, [in] any sheetName, [in] any cellAddress);
    };

    service EasyDev {
        interface XDebug;
        interface XTools;
        interface XLOApp;
        interface XLOCalc;
    };

    published struct SmtpServer
    {
        string Name;
        unsigned short Port;
        boolean Ssl;
        string User;
        string Password;
        boolean Thread;
    };

    published struct EmailMessage
    {
        string To;
        string Cc;
        string Bcc;
        string Subject;
        string Body;
        sequence< string > Files;
    };

    interface XEMail : com::sun::star::uno::XInterface
    {
        boolean sendMail(
            [in] org::universolibre::EasyDev::SmtpServer server,
            [in] org::universolibre::EasyDev::EmailMessage message
        );
    };

    service Email {
        interface XEMail;
    };

}; }; };
#endif
